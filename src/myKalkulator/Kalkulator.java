/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package myKalkulator;

import java.util.Stack;

/**
 *
 * @author usernob
 */
public class Kalkulator extends javax.swing.JFrame {

    String infix = "";
    boolean isValid = false;
    Stack<Integer> unclosedBracket = new Stack<>();

    /**
     * Creates new form Kalkulator
     */
    public Kalkulator() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        inputField = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        pow = new javax.swing.JButton();
        modulus = new javax.swing.JButton();
        perX = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        pow2 = new javax.swing.JButton();
        bracketStart = new javax.swing.JButton();
        bracketEnd = new javax.swing.JButton();
        tambah = new javax.swing.JButton();
        satu = new javax.swing.JButton();
        dua = new javax.swing.JButton();
        tiga = new javax.swing.JButton();
        kurang = new javax.swing.JButton();
        empat = new javax.swing.JButton();
        lima = new javax.swing.JButton();
        enam = new javax.swing.JButton();
        kali = new javax.swing.JButton();
        tujuh = new javax.swing.JButton();
        delapan = new javax.swing.JButton();
        sembilan = new javax.swing.JButton();
        bagi = new javax.swing.JButton();
        titik = new javax.swing.JButton();
        nol = new javax.swing.JButton();
        equal = new javax.swing.JButton();
        sqrt = new javax.swing.JButton();
        pow10 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Java Kalkulator");
        setResizable(false);

        inputField.setEditable(false);
        inputField.setFont(new java.awt.Font("Poppins SemiBold", 0, 36)); // NOI18N
        inputField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(inputField, javax.swing.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 79, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(inputField, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jPanel2.setLayout(new java.awt.GridBagLayout());

        pow.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        pow.setText("x^y");
        pow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                powActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(pow, gridBagConstraints);

        modulus.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        modulus.setText("%");
        modulus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modulusActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(modulus, gridBagConstraints);

        perX.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        perX.setText("1/x");
        perX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                perXActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(perX, gridBagConstraints);

        clear.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        clear.setText("Clear");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(clear, gridBagConstraints);

        pow2.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        pow2.setText("x^2");
        pow2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pow2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(pow2, gridBagConstraints);

        bracketStart.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        bracketStart.setText("(");
        bracketStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bracketStartActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(bracketStart, gridBagConstraints);

        bracketEnd.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        bracketEnd.setText(")");
        bracketEnd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bracketEndActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(bracketEnd, gridBagConstraints);

        tambah.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        tambah.setText("+");
        tambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tambahActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(tambah, gridBagConstraints);

        satu.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        satu.setText("1");
        satu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                satuActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(satu, gridBagConstraints);

        dua.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        dua.setText("2");
        dua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                duaActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(dua, gridBagConstraints);

        tiga.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        tiga.setText("3");
        tiga.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tigaActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(tiga, gridBagConstraints);

        kurang.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        kurang.setText("-");
        kurang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kurangActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(kurang, gridBagConstraints);

        empat.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        empat.setText("4");
        empat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                empatActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(empat, gridBagConstraints);

        lima.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        lima.setText("5");
        lima.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limaActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(lima, gridBagConstraints);

        enam.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        enam.setText("6");
        enam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enamActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(enam, gridBagConstraints);

        kali.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        kali.setText("*");
        kali.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kaliActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(kali, gridBagConstraints);

        tujuh.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        tujuh.setText("7");
        tujuh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tujuhActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(tujuh, gridBagConstraints);

        delapan.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        delapan.setText("8");
        delapan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delapanActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(delapan, gridBagConstraints);

        sembilan.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        sembilan.setText("9");
        sembilan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sembilanActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(sembilan, gridBagConstraints);

        bagi.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        bagi.setText("/");
        bagi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bagiActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(bagi, gridBagConstraints);

        titik.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        titik.setText(".");
        titik.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                titikActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(titik, gridBagConstraints);

        nol.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        nol.setText("0");
        nol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nolActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(nol, gridBagConstraints);

        equal.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        equal.setText("=");
        equal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                equalActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(equal, gridBagConstraints);

        sqrt.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        sqrt.setText("sqrt(x)");
        sqrt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sqrtActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(sqrt, gridBagConstraints);

        pow10.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        pow10.setText("10^x");
        pow10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pow10ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(pow10, gridBagConstraints);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 345, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public static int precedence(char c) {
        return switch (c) {
            case '+', '-' ->
                1;
            case '*', '/', '%' ->
                2;
            case '^' ->
                3;
            case 's', '(', ')' -> //this is bad
                4;
            default ->
                -1;
        };
    }

    public static String infixToPostfix(String infix) {

        StringBuilder postfix = new StringBuilder();
        Stack<Character> operatorStack = new Stack<>();

        for (String token : infix.split("\\s")) {
            if (token.isEmpty()) {
                continue;
            }

            char c = token.charAt(0);
            int indexOperator = precedence(c);

            if (c == 's') {
                operatorStack.add(c);
                operatorStack.add('(');
                continue;
            }

            if (indexOperator != -1 && token.length() < 2) {
                if (operatorStack.isEmpty()) {
                    operatorStack.push(c);
                } else {
                    while (!operatorStack.isEmpty() && precedence(operatorStack.peek()) >= precedence(c) && operatorStack.peek() != '(') {
                        postfix.append(operatorStack.pop()).append(' ');
                    }
                    operatorStack.push(c);
                }

            } else {
                postfix.append(token).append(' ');
            }

            if (c == ')') {
                while (!operatorStack.isEmpty()) {
                    if (operatorStack.peek() == '(') {
                        operatorStack.pop();
                        if (operatorStack.isEmpty()) {
                            break;
                        }
                        if (operatorStack.peek() == 's') {
                            postfix.append(operatorStack.pop()).append(' ');
                        }
                        break;
                    }

                    if (operatorStack.peek() == ')') {
                        operatorStack.pop();
                        continue;
                    }

                    postfix.append(operatorStack.pop()).append(' ');
                }
            }
        }

        while (!operatorStack.isEmpty()) {
            if (operatorStack.peek() == '(' || operatorStack.peek() == ')') {
                operatorStack.pop();
                continue;
            }
            postfix.append(operatorStack.pop()).append(' ');
        }

        return postfix.toString().trim();
    }

    public static double evaluatePostfix(String postfix) {
        Stack<Double> operatorStack = new Stack<>();

        for (String token : postfix.split("\\s")) {
            if (token.isEmpty()) {
                continue;
            }

            if (precedence(token.charAt(0)) != -1 && token.length() < 2) {
                double val1 = operatorStack.pop();
                double val2 = !"s".equals(token) ? operatorStack.pop() : 0.0;

                switch (token) {
                    case "+" ->
                        operatorStack.push(val2 + val1);
                    case "-" ->
                        operatorStack.push(val2 - val1);
                    case "*" ->
                        operatorStack.push(val2 * val1);
                    case "/" ->
                        operatorStack.push(val2 / val1);
                    case "%" ->
                        operatorStack.push(val2 % val1);
                    case "^" ->
                        operatorStack.push(Math.pow(val2, val1));
                    case "s" ->
                        operatorStack.push(Math.sqrt(val1));
                    default ->
                        throw new AssertionError();
                }
            } else {
                operatorStack.push(Double.valueOf(token));
            }
        }
        return operatorStack.pop();
    }

    public void displayOutput(String num) {
        int maxFontSize = 32;
        inputField.setText(num);

        if (num == null) {
            inputField.setFont(new java.awt.Font(inputField.getFont().getName(), java.awt.Font.BOLD, maxFontSize));
            return;
        }

        java.awt.FontMetrics fontMetric = inputField.getFontMetrics(inputField.getFont());
        int textWidth = fontMetric.stringWidth(num) + 50; // width + margin

        if (textWidth > inputField.getWidth()) {
            double scale = (double) inputField.getWidth() / textWidth;
            int newFontSize = (int) (inputField.getFont().getSize() * scale);

            inputField.setFont(new java.awt.Font(inputField.getFont().getName(), java.awt.Font.BOLD, Math.max(newFontSize, 10)));
        }
    }

    public void addToInfix(String str, boolean isOperator) {
        if (isOperator && !isValid) {
            return;
        }
        isValid = !isOperator;
        infix += str;
        displayOutput(infix);
    }

    public void addBracketToInfix(boolean isEndBracket) {
        String str;
        if (isEndBracket) {
            if (unclosedBracket.isEmpty()) {
                return;
            }

            if (infix.length() > 1) {
                if (infix.charAt(infix.length() - 1) == ' ') {
                    str = "0 )";
                } else {
                    str = " )";
                }
            } else {
                str = " )";
            }

            isValid = true;
            unclosedBracket.pop();
        } else {
            if (infix.length() >= 1) {
                if (infix.charAt(infix.length() - 1) != ' ') {
                    str = " * ( ";
                } else {
                    str = "( ";
                }
            } else {
                str = "( ";
            }

            isValid = false;
            unclosedBracket.add(1);
        }
        infix += str;
        displayOutput(infix);
    }

    private void powActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_powActionPerformed
        // TODO add your handling code here:
        addToInfix(" ^ ", true);
    }//GEN-LAST:event_powActionPerformed

    private void modulusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modulusActionPerformed
        // TODO add your handling code here:
        addToInfix(" % ", true);
    }//GEN-LAST:event_modulusActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        // TODO add your handling code here:
        infix = "";
        isValid = false;
        displayOutput(null);
    }//GEN-LAST:event_clearActionPerformed

    private void pow2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pow2ActionPerformed
        // TODO add your handling code here:
        if (!isValid) {
            return;
        }
        isValid = true;
        infix += " ^ 2";
        displayOutput(infix);
    }//GEN-LAST:event_pow2ActionPerformed

    private void bracketStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bracketStartActionPerformed
        // TODO add your handling code here:
        addBracketToInfix(false);
    }//GEN-LAST:event_bracketStartActionPerformed

    private void bracketEndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bracketEndActionPerformed
        // TODO add your handling code here:
        addBracketToInfix(true);
    }//GEN-LAST:event_bracketEndActionPerformed

    private void tambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tambahActionPerformed
        // TODO add your handling code here:
        addToInfix(" + ", true);
    }//GEN-LAST:event_tambahActionPerformed

    private void satuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_satuActionPerformed
        // TODO add your handling code here:
        addToInfix("1", false);
    }//GEN-LAST:event_satuActionPerformed

    private void duaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_duaActionPerformed
        // TODO add your handling code here:
        addToInfix("2", false);
    }//GEN-LAST:event_duaActionPerformed

    private void tigaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tigaActionPerformed
        // TODO add your handling code here:
        addToInfix("3", false);
    }//GEN-LAST:event_tigaActionPerformed

    private void kurangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kurangActionPerformed
        // TODO add your handling code here:
        addToInfix(" - ", true);
    }//GEN-LAST:event_kurangActionPerformed

    private void empatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_empatActionPerformed
        // TODO add your handling code here:
        addToInfix("4", false);
    }//GEN-LAST:event_empatActionPerformed

    private void limaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limaActionPerformed
        // TODO add your handling code here:
        addToInfix("5", false);
    }//GEN-LAST:event_limaActionPerformed

    private void enamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enamActionPerformed
        // TODO add your handling code here:
        addToInfix("6", false);
    }//GEN-LAST:event_enamActionPerformed

    private void kaliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kaliActionPerformed
        // TODO add your handling code here:
        addToInfix(" * ", true);
    }//GEN-LAST:event_kaliActionPerformed

    private void tujuhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tujuhActionPerformed
        // TODO add your handling code here:
        addToInfix("7", false);
    }//GEN-LAST:event_tujuhActionPerformed

    private void delapanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delapanActionPerformed
        // TODO add your handling code here:
        addToInfix("8", false);
    }//GEN-LAST:event_delapanActionPerformed

    private void sembilanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sembilanActionPerformed
        // TODO add your handling code here:
        addToInfix("9", false);
    }//GEN-LAST:event_sembilanActionPerformed

    private void bagiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bagiActionPerformed
        // TODO add your handling code here:
        addToInfix(" / ", true);
    }//GEN-LAST:event_bagiActionPerformed

    private void titikActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_titikActionPerformed
        // TODO add your handling code here:
        addToInfix(".", false);
    }//GEN-LAST:event_titikActionPerformed

    private void nolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nolActionPerformed
        // TODO add your handling code here:
        addToInfix("0", false);
    }//GEN-LAST:event_nolActionPerformed

    private void equalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_equalActionPerformed
        // TODO add your handling code here:
        if (isValid && unclosedBracket.isEmpty()) {
            try {
                String postfix = infixToPostfix(infix);
                double result = evaluatePostfix(postfix);
                if (result == (int) result) {
                    displayOutput(String.valueOf((int) result));
                    infix = String.valueOf((int) result);

                } else {
                    displayOutput(String.valueOf(result));
                    infix = String.valueOf(result);
                }
            } catch (Exception e) {
                e.printStackTrace();
                displayOutput("Error/Invalid Format");
            }
        }
    }//GEN-LAST:event_equalActionPerformed

    private void perXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_perXActionPerformed
        // TODO add your handling code here:
        addBracketToInfix(false);
        infix += "1 / ";
        isValid = false;
        displayOutput(infix);
    }//GEN-LAST:event_perXActionPerformed

    private void sqrtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sqrtActionPerformed
        // TODO add your handling code here:
        if (infix.length() >= 1) {
            if (infix.charAt(infix.length() - 1) != ' ') {
                infix += " * sqrt( ";
                isValid = false;
                displayOutput(infix);
            } else {
                infix += "sqrt( ";
                isValid = false;
                displayOutput(infix);
            }
        } else {
            infix += "sqrt( ";
            isValid = false;
            displayOutput(infix);
        }
        unclosedBracket.add(1);
    }//GEN-LAST:event_sqrtActionPerformed

    private void pow10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pow10ActionPerformed
        // TODO add your handling code here:
        addBracketToInfix(false);
        infix += "10 ^ ";
        isValid = false;
        displayOutput(infix);
    }//GEN-LAST:event_pow10ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Kalkulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Kalkulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Kalkulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Kalkulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Kalkulator().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bagi;
    private javax.swing.JButton bracketEnd;
    private javax.swing.JButton bracketStart;
    private javax.swing.JButton clear;
    private javax.swing.JButton delapan;
    private javax.swing.JButton dua;
    private javax.swing.JButton empat;
    private javax.swing.JButton enam;
    private javax.swing.JButton equal;
    private javax.swing.JTextField inputField;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton kali;
    private javax.swing.JButton kurang;
    private javax.swing.JButton lima;
    private javax.swing.JButton modulus;
    private javax.swing.JButton nol;
    private javax.swing.JButton perX;
    private javax.swing.JButton pow;
    private javax.swing.JButton pow10;
    private javax.swing.JButton pow2;
    private javax.swing.JButton satu;
    private javax.swing.JButton sembilan;
    private javax.swing.JButton sqrt;
    private javax.swing.JButton tambah;
    private javax.swing.JButton tiga;
    private javax.swing.JButton titik;
    private javax.swing.JButton tujuh;
    // End of variables declaration//GEN-END:variables
}
